apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    enableBundleCompression = (findProperty('android.enableBundleCompression') ?: false).toBoolean()
    // Use Expo CLI to bundle the app, this ensures the Metro config
    // works correctly with Expo projects.
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    /* Folders */
     //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]

    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true in release builds to optimize the app using [R8](https://developer.android.com/topic/performance/app-optimization/enable-app-optimization).
 */
def enableMinifyInReleaseBuilds = (findProperty('android.enableMinifyInReleaseBuilds') ?: false).toBoolean()

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion libs.versions.app.buildToolsVersion.get()
    compileSdkVersion libs.versions.app.compileSdk.get() as Integer

    namespace 'com.steve1316.uma_android_automation'
    defaultConfig {
        applicationId 'com.steve1316.uma_android_automation'
        minSdkVersion libs.versions.app.minSdk.get() as Integer
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion libs.versions.app.targetSdk.get() as Integer
        versionCode libs.versions.app.versionCode.get() as Integer
        versionName libs.versions.app.versionName.get()

        buildConfigField "String", "REACT_NATIVE_RELEASE_LEVEL", "\"${findProperty('reactNativeReleaseLevel') ?: 'stable'}\""
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            crunchPngs true  // Good for reducing APK size.
            // Usually no minification or resource shrinking.
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableMinifyInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }

    // Specify which architecture to make apks for, or set universalApk to true for an all-in-one apk with increased file size.
    splits {
        abi {
            enable true
            reset()
            //noinspection ChromeOsAbiSupport
            include("armeabi-v7a", "arm64-v8a")
            // include "armeabi","armeabi-v7a",'arm64-v8a',"mips","x86","x86_64"
            universalApk false
        }
    }

    applicationVariants.configureEach { variant ->
        def releaseType = variant.buildType.name
        // Allow layout XMLs to get a reference to the application's version number.
        variant.resValue("string", "versionName", "v${variant.versionName}")

        // Auto-generate the file name.
        // To access the output file name, the apk variants must be explicitly cast to,
        // as in the previous groovy version (where they were implicitly cast).
        variant.outputs.configureEach { output ->
            def type = releaseType
            def versionName = variant.versionName
            def architecture = output.filters.first().identifier
            output.outputFileName = "v${versionName}-UmaAndroidAutomation-${architecture}-${type}.apk"
        }
    }

    androidResources {
        noCompress += ["bundle"]
    }
}

// Apply static values from `gradle.properties` to the `android.packagingOptions`
// Accepts values in comma delimited lists, example:
// android.packagingOptions.pickFirsts=/LICENSE,**/picasa.ini
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    // Split option: 'foo,bar' -> ['foo', 'bar']
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",")
    // Trim all elements in place.
    for (i in 0..<options.size()) options[i] = options[i].trim()
    // `[] - ""` is essentially `[""].filter(Boolean)` removing all empty strings.
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        // Ex: android.packagingOptions.pickFirsts += '**/SCCS/**'
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    // Automation Library
    implementation(libs.android.cv.automation.library)

    // React Native
    implementation(libs.react.android)
    implementation(libs.hermes.android)

    // Lottie for the native splash screen
    implementation(libs.lottie)

    if (hermesEnabled.toBoolean()) {
        implementation(libs.hermes.android)
    } else {
        implementation jscFlavor
    }
}

// ============================================================================
// React Native Bundle Configuration and Build Tasks
// ============================================================================

// Clean task to remove old React Native bundles and generated assets.
// This prevents stale bundles from being included in new builds.
tasks.register('cleanBundle', Delete) {
    delete("${projectDir}/src/main/assets/index.android.bundle")
    delete("${projectDir}/build")
    delete("${projectDir}/.cxx")

    doLast {
        println("CleanBundle task completed. Deleted:")
        println("- ${projectDir}/src/main/assets/index.android.bundle")
        println("- ${projectDir}/build")
        println("- ${projectDir}/.cxx")
    }
}

// Make the main clean task depend on cleanBundle to ensure React Native assets are cleaned.
clean.dependsOn(cleanBundle)

// Generate the React Native JavaScript bundle before building the APK.
// This task runs the generate-bundle.js script to create the JavaScript bundle.
tasks.register("generateBundle", Exec) {
    workingDir = projectDir.parentFile
    commandLine("node", "generate-bundle.js")

    // Only run if the bundle generation script exists.
    onlyIf {
        file("${projectDir.parentFile}/generate-bundle.js").exists()
    }

    // Handle case where the bundle generation script doesn't exist.
    doFirst {
        if (!file("${projectDir.parentFile}/generate-bundle.js").exists()) {
            println("Bundle generation script not found, skipping...")
            enabled = false
        }
    }
}

// Ensure the React Native bundle is generated before the preBuild task runs.
// This guarantees the bundle is available for the build process.
preBuild.dependsOn(generateBundle)
